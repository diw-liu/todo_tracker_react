{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Diwen\\\\Downloads\\\\todo_tracker_hw2-main\\\\todo_tracker_hw2-main\\\\src\\\\App.js\";\n// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\nimport React, { Component } from 'react';\nimport testData from './test/testData.json';\nimport jsTPS from './common/jsTPS.js';\nimport AddNewItem_Transaction from './transactions/AddNewItem_Transaction.js';\nimport MoveItem_Transaction from './transactions/MoveItem_Transaction.js'; // THESE ARE OUR REACT COMPONENTS\n\nimport Navbar from './components/Navbar';\nimport LeftSidebar from './components/LeftSidebar';\nimport Workspace from './components/Workspace';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n{\n  /*import ItemsListHeaderComponent from './components/ItemsListHeaderComponent'\n  import ItemsListComponent from './components/ItemsListComponent'\n  import ListsComponent from './components/ListsComponent'\n  */\n}\n\nclass App extends Component {\n  constructor(props) {\n    // ALWAYS DO THIS FIRST\n    super(props); // DISPLAY WHERE WE ARE\n\n    this.loadToDoList = toDoList => {\n      console.log(\"loading \" + toDoList); // MAKE SURE toDoList IS AT THE TOP OF THE STACK BY REMOVING THEN PREPENDING\n\n      const nextLists = this.state.toDoLists.filter(testList => testList.id !== toDoList.id);\n      nextLists.unshift(toDoList);\n      this.setState({\n        toDoLists: nextLists,\n        currentList: toDoList\n      });\n    };\n\n    this.addNewList = () => {\n      let newToDoListInList = [this.makeNewToDoList()];\n      let newToDoListsList = [...newToDoListInList, ...this.state.toDoLists];\n      let newToDoList = newToDoListInList[0]; // AND SET THE STATE, WHICH SHOULD FORCE A render\n\n      this.setState({\n        toDoLists: newToDoListsList,\n        currentList: newToDoList,\n        nextListId: this.state.nextListId + 1\n      }, this.afterToDoListsChangeComplete);\n    };\n\n    this.makeNewToDoList = () => {\n      let newToDoList = {\n        id: this.state.nextListId,\n        name: 'Untitled',\n        items: []\n      };\n      return newToDoList;\n    };\n\n    this.addNewItemTransaction = () => {\n      let transaction = new AddNewItem_Transaction(this);\n      this.tps.addTransaction(transaction);\n    };\n\n    this.moveItemTransaction = (id, step) => {\n      let transaction = new MoveItem_Transaction(this, id, step);\n      this.tps.addTransaction(transaction);\n    };\n\n    this.addNewItem = () => {\n      let temp = this.state.currentList;\n      let newToDoListItem = [this.makeNewToDoListItem()];\n      temp.items = [...temp.items, ...newToDoListItem];\n      this.setState({\n        currentList: temp,\n        nextListItemId: this.state.nextListItemId + 1\n      });\n      return newToDoListItem[0];\n    };\n\n    this.makeNewToDoListItem = () => {\n      let newToDoListItem = {\n        id: this.state.nextListItemId,\n        description: \"No Description\",\n        due_date: new Date().toUTCString(),\n        status: \"incomplete\"\n      };\n      return newToDoListItem;\n    };\n\n    this.afterToDoListsChangeComplete = () => {\n      console.log(\"App updated currentToDoList: \" + this.state.currentList); // WILL THIS WORK? @todo\n\n      let toDoListsString = JSON.stringify(this.state.toDoLists);\n      localStorage.setItem(\"recent_work\", toDoListsString);\n    };\n\n    this.moveItem = (id, step) => {\n      var items = this.state.currentList.items;\n      var index = -1;\n\n      for (var i = 0; i < items.length; i++) {\n        if (items[i].id == id) {\n          index = i;\n        }\n      }\n\n      if ((index > 0 && step == 1) | (index < items.length - 1 && step == -1)) {\n        var temp = items[index];\n        items[index] = items[index - step];\n        items[index - step] = temp;\n      }\n\n      this.setState({\n        currentList: {\n          items\n        }\n      });\n    };\n\n    this.deleteItem = id => {\n      var items = this.state.currentList.items;\n      var index = -1;\n\n      for (var i = 0; i < items.length; i++) {\n        if (items[i].id == id) {\n          index = i;\n        }\n      }\n\n      items.splice(index, 1);\n      this.setState({\n        currentList: {\n          items\n        }\n      });\n    };\n\n    this.closeCurrentList = () => {\n      this.setState({\n        currentList: {\n          items: []\n        }\n      });\n    };\n\n    this.itemChange = (id, desc, date, status) => {\n      var items = this.state.currentList.items;\n\n      for (var i = 0; i < items.length; i++) {\n        if (items[i].id == id) {\n          items[i].description = desc;\n          items[i].due_date = date;\n          items[i].status = status;\n        }\n      }\n    };\n\n    this.removeCurrentList = () => {\n      var todoList = this.state.toDoLists;\n      var index = -1;\n\n      for (var i = 0; i < todoList.length; i++) {\n        if (todoList[i] === this.state.currentList) {\n          index = i;\n        }\n      }\n\n      todoList.splice(index, 1);\n      this.setState({\n        toDoLists: todoList,\n        currentList: {\n          items: []\n        }\n      });\n    };\n\n    this.undo = () => {\n      if (this.tps.hasTransactionToUndo()) {\n        this.tps.undoTransaction(); // if (!this.tps.hasTransactionToUndo()) {\n        //     this.view.disableButton(\"undo-button\");\n        // }\n        // this.view.enableButton(\"redo-button\");\n      }\n    };\n\n    this.redo = () => {\n      if (this.tps.hasTransactionToRedo()) {\n        this.tps.doTransaction(); // if (!this.tps.hasTransactionToRedo()) {\n        //     this.view.disableButton(\"redo-button\");\n        // }\n        // this.view.enableButton(\"undo-button\");\n      }\n    };\n\n    console.log(\"App constructor\"); // MAKE OUR TRANSACTION PROCESSING SYSTEM\n\n    this.tps = new jsTPS(); // CHECK TO SEE IF THERE IS DATA IN LOCAL STORAGE FOR THIS APP\n\n    let recentLists = localStorage.getItem(\"recentLists\");\n    console.log(\"recentLists: \" + recentLists);\n\n    if (!recentLists) {\n      recentLists = JSON.stringify(testData.toDoLists);\n      localStorage.setItem(\"toDoLists\", recentLists);\n    }\n\n    recentLists = JSON.parse(recentLists); // FIND OUT WHAT THE HIGHEST ID NUMBERS ARE FOR LISTS\n\n    let highListId = -1;\n    let highListItemId = -1;\n\n    for (let i = 0; i < recentLists.length; i++) {\n      let toDoList = recentLists[i];\n\n      if (toDoList.id > highListId) {\n        highListId = toDoList.id;\n      }\n\n      for (let j = 0; j < toDoList.items.length; j++) {\n        let toDoListItem = toDoList.items[j];\n        if (toDoListItem.id > highListItemId) highListItemId = toDoListItem.id;\n      }\n    }\n\n    ; // SETUP OUR APP STATE\n\n    this.state = {\n      toDoLists: recentLists,\n      currentList: {\n        items: []\n      },\n      nextListId: highListId + 1,\n      nextListItemId: highListItemId + 1,\n      useVerboseFeedback: true\n    };\n  } // WILL LOAD THE SELECTED LIST\n\n\n  render() {\n    let items = this.state.currentList.items;\n    console.log(this.state.toDoLists);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"root\",\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LeftSidebar, {\n        toDoLists: this.state.toDoLists,\n        loadToDoListCallback: this.loadToDoList,\n        addNewListCallback: this.addNewList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Workspace, {\n        toDoListItems: items,\n        moveItemCallBack: this.moveItemTransaction,\n        closeCurrentListCallBack: this.closeCurrentList,\n        deleteItemCallBack: this.deleteItem,\n        itemChangeCallBack: this.itemChange,\n        removeCurrentListCallBack: this.removeCurrentList,\n        addNewItemCallBack: this.addNewItemTransaction,\n        undoCallBack: this.undo,\n        redoCallBack: this.redo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Diwen/Downloads/todo_tracker_hw2-main/todo_tracker_hw2-main/src/App.js"],"names":["React","Component","testData","jsTPS","AddNewItem_Transaction","MoveItem_Transaction","Navbar","LeftSidebar","Workspace","App","constructor","props","loadToDoList","toDoList","console","log","nextLists","state","toDoLists","filter","testList","id","unshift","setState","currentList","addNewList","newToDoListInList","makeNewToDoList","newToDoListsList","newToDoList","nextListId","afterToDoListsChangeComplete","name","items","addNewItemTransaction","transaction","tps","addTransaction","moveItemTransaction","step","addNewItem","temp","newToDoListItem","makeNewToDoListItem","nextListItemId","description","due_date","Date","toUTCString","status","toDoListsString","JSON","stringify","localStorage","setItem","moveItem","index","i","length","deleteItem","splice","closeCurrentList","itemChange","desc","date","removeCurrentList","todoList","undo","hasTransactionToUndo","undoTransaction","redo","hasTransactionToRedo","doTransaction","recentLists","getItem","parse","highListId","highListItemId","j","toDoListItem","useVerboseFeedback","render"],"mappings":"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","sourcesContent":["// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\nimport React, { Component } from 'react';\nimport testData from './test/testData.json'\nimport jsTPS from './common/jsTPS.js'\nimport AddNewItem_Transaction from './transactions/AddNewItem_Transaction.js'\nimport MoveItem_Transaction from './transactions/MoveItem_Transaction.js'\n\n// THESE ARE OUR REACT COMPONENTS\nimport Navbar from './components/Navbar'\nimport LeftSidebar from './components/LeftSidebar'\nimport Workspace from './components/Workspace'\n{/*import ItemsListHeaderComponent from './components/ItemsListHeaderComponent'\nimport ItemsListComponent from './components/ItemsListComponent'\nimport ListsComponent from './components/ListsComponent'\n*/}\nclass App extends Component {\n  constructor(props) {\n    // ALWAYS DO THIS FIRST\n    super(props);\n\n    // DISPLAY WHERE WE ARE\n    console.log(\"App constructor\");\n\n    // MAKE OUR TRANSACTION PROCESSING SYSTEM\n    this.tps = new jsTPS();\n\n    // CHECK TO SEE IF THERE IS DATA IN LOCAL STORAGE FOR THIS APP\n    let recentLists = localStorage.getItem(\"recentLists\");\n    console.log(\"recentLists: \" + recentLists);\n    if (!recentLists) {\n      recentLists = JSON.stringify(testData.toDoLists);\n      localStorage.setItem(\"toDoLists\", recentLists);\n    }\n    recentLists = JSON.parse(recentLists);\n\n    // FIND OUT WHAT THE HIGHEST ID NUMBERS ARE FOR LISTS\n    let highListId = -1;\n    let highListItemId = -1;\n    for (let i = 0; i < recentLists.length; i++) {\n      let toDoList = recentLists[i];\n      if (toDoList.id > highListId) {\n        highListId = toDoList.id;\n      }\n      for (let j = 0; j < toDoList.items.length; j++) {\n        let toDoListItem = toDoList.items[j];\n        if (toDoListItem.id > highListItemId)\n        highListItemId = toDoListItem.id;\n      }\n    };\n\n    // SETUP OUR APP STATE\n    this.state = {\n      toDoLists: recentLists,\n      currentList: {items: []},\n      nextListId: highListId+1,\n      nextListItemId: highListItemId+1,\n      useVerboseFeedback: true\n    }\n  }\n\n  // WILL LOAD THE SELECTED LIST\n  loadToDoList = (toDoList) => {\n    console.log(\"loading \" + toDoList);\n\n    // MAKE SURE toDoList IS AT THE TOP OF THE STACK BY REMOVING THEN PREPENDING\n    const nextLists = this.state.toDoLists.filter(testList =>\n      testList.id !== toDoList.id\n    );\n    nextLists.unshift(toDoList);\n\n    this.setState({\n      toDoLists: nextLists,\n      currentList: toDoList\n    });\n  }\n\n  addNewList = () => {\n    let newToDoListInList = [this.makeNewToDoList()];\n    let newToDoListsList = [...newToDoListInList, ...this.state.toDoLists];\n    let newToDoList = newToDoListInList[0];\n\n    // AND SET THE STATE, WHICH SHOULD FORCE A render\n    this.setState({\n      toDoLists: newToDoListsList,\n      currentList: newToDoList,\n      nextListId: this.state.nextListId+1\n    }, this.afterToDoListsChangeComplete);\n\n  }\n\n  makeNewToDoList = () => {\n    let newToDoList = {\n      id: this.state.nextListId,\n      name: 'Untitled',\n      items: []\n    };\n    return newToDoList;\n  }\n  //Transaction\n  addNewItemTransaction = () =>{\n    let transaction = new AddNewItem_Transaction(this);\n    this.tps.addTransaction(transaction);\n  }\n  moveItemTransaction = (id,step) =>{\n    let transaction = new MoveItem_Transaction(this,id,step);\n    this.tps.addTransaction(transaction);\n  }\n  removeItemTransaction\n\n  //Constr\n  addNewItem = () =>{\n    let temp=this.state.currentList;\n    let newToDoListItem = [this.makeNewToDoListItem()];\n    temp.items = [...temp.items, ...newToDoListItem];\n\n    this.setState({\n      currentList:temp,\n      nextListItemId:this.state.nextListItemId+1\n    })\n    return newToDoListItem[0];\n  }\n\n  makeNewToDoListItem = () =>  {\n    let newToDoListItem = {\n      id: this.state.nextListItemId,\n      description: \"No Description\",\n      due_date\n      :  new Date().toUTCString(),\n      status: \"incomplete\"\n    };\n    return newToDoListItem;\n  }\n\n  // THIS IS A CALLBACK FUNCTION FOR AFTER AN EDIT TO A LIST\n  afterToDoListsChangeComplete = () => {\n    console.log(\"App updated currentToDoList: \" + this.state.currentList);\n\n    // WILL THIS WORK? @todo\n    let toDoListsString = JSON.stringify(this.state.toDoLists);\n    localStorage.setItem(\"recent_work\", toDoListsString);\n  }\n\n\n  //Construction site\n  moveItem = (id,step) =>{\n    var items = this.state.currentList.items;\n    var index = -1;\n    for(var i=0;i<items.length;i++){\n      if(items[i].id==id){\n         index=i;\n      }\n    }\n    if((index>0&&step==1)|(index<items.length-1&&step==-1)){\n      var temp=items[index];\n      items[index]=items[index-step];\n      items[index-step]=temp;\n    }\n    this.setState({\n      currentList:{items}\n    })\n  }\n\n  deleteItem = (id) =>{\n    var items = this.state.currentList.items;\n    var index = -1;\n    for(var i=0;i<items.length;i++){\n      if(items[i].id==id){\n        index=i;\n     }\n    }\n    items.splice(index, 1);\n    this.setState({\n      currentList:{items}\n    })\n  }\n\n  closeCurrentList = () =>{\n    this.setState({\n      currentList: {items: []}\n    })\n  }\n  \n  itemChange = (id,desc,date,status) =>{\n    var items = this.state.currentList.items;\n    for(var i=0;i<items.length;i++){\n      if(items[i].id==id){\n          items[i].description =desc;\n          items[i].due_date    =date;\n          items[i].status      =status;\n      }\n    }\n  }\n\n  removeCurrentList = () =>{\n    var todoList=this.state.toDoLists\n    var index = -1;\n    for(var i=0;i<todoList.length;i++){\n      if(todoList[i]===this.state.currentList){\n        index=i;\n      }\n    }\n    todoList.splice(index, 1);\n    this.setState({\n      toDoLists: todoList,\n      currentList: {items: []}\n    })\n  }\n\n  // SIMPLE UNDO/REDO FUNCTIONS\n  undo = () => {\n    if (this.tps.hasTransactionToUndo()) {\n        this.tps.undoTransaction();\n        // if (!this.tps.hasTransactionToUndo()) {\n        //     this.view.disableButton(\"undo-button\");\n        // }\n        // this.view.enableButton(\"redo-button\");\n    }\n  } \n\n  redo = () => {\n    if (this.tps.hasTransactionToRedo()) {\n        this.tps.doTransaction();\n        // if (!this.tps.hasTransactionToRedo()) {\n        //     this.view.disableButton(\"redo-button\");\n        // }\n        // this.view.enableButton(\"undo-button\");\n    }\n  }\n\n  \n  render() {\n    let items = this.state.currentList.items;\n    console.log(this.state.toDoLists);\n    return (\n      <div id=\"root\">\n        <Navbar />\n        <LeftSidebar \n          toDoLists={this.state.toDoLists}\n          loadToDoListCallback={this.loadToDoList}\n          addNewListCallback={this.addNewList}\n        />\n        <Workspace \n          toDoListItems={items} \n          moveItemCallBack={this.moveItemTransaction}\n          closeCurrentListCallBack={this.closeCurrentList}\n          deleteItemCallBack={this.deleteItem}\n          itemChangeCallBack={this.itemChange}\n          removeCurrentListCallBack={this.removeCurrentList}\n          addNewItemCallBack={this.addNewItemTransaction}\n          undoCallBack={this.undo}\n          redoCallBack={this.redo}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}